!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
EXCEPTIONS_H	../lib/Exceptions.h	2;"	d
EXCEP_FILE	../bin/text2list.cc	11;"	d	file:
Exceptions	../lib/Exceptions.cc	/^Exceptions::Exceptions(string FileName) {$/;"	f	class:Exceptions
Exceptions	../lib/Exceptions.h	/^class Exceptions {$/;"	c
Exceptions::Exceptions	../lib/Exceptions.cc	/^Exceptions::Exceptions(string FileName) {$/;"	f	class:Exceptions
Exceptions::ReadFromFile	../lib/Exceptions.cc	/^void Exceptions::ReadFromFile(string &FileName) {$/;"	f	class:Exceptions
Exceptions::dict	../lib/Exceptions.h	/^    vector<string> dict;$/;"	m	class:Exceptions
Exceptions::find	../lib/Exceptions.cc	/^bool Exceptions::find(string &target) {$/;"	f	class:Exceptions
GCC_FLAGS	../bin/makefile	/^GCC_FLAGS=-std=c++11 $(FL)$/;"	m
GetWord	../lib/WordAggregator.cc	/^string WordAggregator::GetWord() {$/;"	f	class:WordAggregator
IN_FILE	../bin/text2list.cc	8;"	d	file:
LIB_PATH	../bin/makefile	/^LIB_PATH=.\/lib$/;"	m
MAIN_NAME	../bin/makefile	/^MAIN_NAME=text2list$/;"	m
OUT_FILE	../bin/text2list.cc	9;"	d	file:
ReadFromFile	../lib/Exceptions.cc	/^void Exceptions::ReadFromFile(string &FileName) {$/;"	f	class:Exceptions
SEPAR_FILE	../bin/text2list.cc	10;"	d	file:
SetSeparators	../lib/WordAggregator.h	/^    void SetSeparators(string separators) { m_separators = separators; }$/;"	f	class:WordAggregator
WORDAGGREGATOR_H	../lib/WordAggregator.h	2;"	d
WordAggregator	../lib/WordAggregator.h	/^    WordAggregator() : m_symbol(' '), m_word(""), m_word_isBuilt(false), m_separators("") { }$/;"	f	class:WordAggregator
WordAggregator	../lib/WordAggregator.h	/^class WordAggregator {$/;"	c
WordAggregator::GetWord	../lib/WordAggregator.cc	/^string WordAggregator::GetWord() {$/;"	f	class:WordAggregator
WordAggregator::SetSeparators	../lib/WordAggregator.h	/^    void SetSeparators(string separators) { m_separators = separators; }$/;"	f	class:WordAggregator
WordAggregator::WordAggregator	../lib/WordAggregator.h	/^    WordAggregator() : m_symbol(' '), m_word(""), m_word_isBuilt(false), m_separators("") { }$/;"	f	class:WordAggregator
WordAggregator::aggregate	../lib/WordAggregator.cc	/^void WordAggregator::aggregate() {$/;"	f	class:WordAggregator
WordAggregator::m_separators	../lib/WordAggregator.h	/^    string m_separators;$/;"	m	class:WordAggregator
WordAggregator::m_symbol	../lib/WordAggregator.h	/^    char m_symbol;$/;"	m	class:WordAggregator
WordAggregator::m_word	../lib/WordAggregator.h	/^    string m_word;$/;"	m	class:WordAggregator
WordAggregator::m_word_isBuilt	../lib/WordAggregator.h	/^    bool m_word_isBuilt;$/;"	m	class:WordAggregator
WordAggregator::word_isBuilt	../lib/WordAggregator.h	/^    bool word_isBuilt() const { return m_word_isBuilt; }$/;"	f	class:WordAggregator
aggregate	../lib/WordAggregator.cc	/^void WordAggregator::aggregate() {$/;"	f	class:WordAggregator
dict	../lib/Exceptions.h	/^    vector<string> dict;$/;"	m	class:Exceptions
find	../lib/Exceptions.cc	/^bool Exceptions::find(string &target) {$/;"	f	class:Exceptions
m_separators	../lib/WordAggregator.h	/^    string m_separators;$/;"	m	class:WordAggregator
m_symbol	../lib/WordAggregator.h	/^    char m_symbol;$/;"	m	class:WordAggregator
m_word	../lib/WordAggregator.h	/^    string m_word;$/;"	m	class:WordAggregator
m_word_isBuilt	../lib/WordAggregator.h	/^    bool m_word_isBuilt;$/;"	m	class:WordAggregator
main	../bin/text2list.cc	/^int main() {$/;"	f
objects	../bin/makefile	/^objects = $(LIB_PATH)\/WordAggregator.o \\$/;"	m
operator <<	../lib/WordAggregator.cc	/^string& operator<< (string &str, WordAggregator &aggregator) {$/;"	f
operator >>	../lib/WordAggregator.cc	/^istream& operator>> (istream &in, WordAggregator &aggregator) {$/;"	f
word_isBuilt	../lib/WordAggregator.h	/^    bool word_isBuilt() const { return m_word_isBuilt; }$/;"	f	class:WordAggregator
